
console.log('datasController.js chargé');
const jsonDatas = './datas/recipes.json';

/**
 * Récupère les données du fichier JSON.
 * @returns {Promise<Object>} Les données JSON.
 */
async function getDatas() {
  try {
    const response = await fetch(jsonDatas);

    if (!response.ok) {
      if (response.status === 404) throw new Error('Aucun fichier trouvé');
    }
  } catch (e) {
    console.log(e);
  }

  const response = await fetch(jsonDatas);
  const datas = await response.json();

  return datas;
}

/**
 * Obtient tous les ingrédients disponibles.
 * @returns {Object} L'objet contenant tous les ingrédients.
 */
function getFullIngredients() {
  const ingredientsArray = [];
  recipesArray.forEach((recipeObject) => {
    const { ingredients } = recipeObject;
    ingredients.forEach((ingredientObject) => {
      const { ingredient } = ingredientObject;
      if (!ingredientsArray.includes(ingredient.toLowerCase())) {
        ingredientsArray.push(ingredient.toLowerCase());
      }
    });
  });

  const StartingredientsArray = { 'ingredients': ingredientsArray };
  return StartingredientsArray;
}

/**
 * Obtient tout le matériel (appareils) disponible.
 * @returns {Object} L'objet contenant tout le matériel.
 */
function getFullAppliance() {
  const appliancesArray = [];
  recipesArray.forEach((recipe) => {
    const { appliance } = recipe;
    if (!appliancesArray.includes(appliance.toLowerCase())) {
      appliancesArray.push(appliance.toLowerCase());
    }
  });

  const finalApplianceObject = { 'appliances': appliancesArray };
  return finalApplianceObject;
}

/**
 * Obtient tous les ustensiles disponibles.
 * @returns {Object} L'objet contenant tous les ustensiles.
 */
function getFullUstensils() {
  const ustensilsArray = [];
  
  recipesArray.forEach((recipe) => {
    const { ustensils } = recipe;
    ustensils.forEach((ustensil) => {
      if (!ustensilsArray.includes(ustensil.toLowerCase())) {
        ustensilsArray.push(ustensil.toLowerCase());
      }
    });  
  });

  const finalUstensilsObject = { 'ustensils': ustensilsArray };
  return finalUstensilsObject;
}

// Récupération des données, des ingrédients, du matériel et des ustensiles
const recipesArray = await getDatas();
const ingredientsObject = getFullIngredients();
const appliancesObject = getFullAppliance();
const ustensilesObject = getFullUstensils();

export { recipesArray, ingredientsObject, appliancesObject, ustensilesObject };

/* eslint-disable import/prefer-default-export */
/* eslint-disable no-console */
/* eslint-disable import/extensions */
// eslint-disable-next-line import/no-unresolved

console.log('RecipesController.js chargé');

const recipeContainer = document.getElementById('recipesCardsContainer'); // Récupère l'élément HTML qui contiendra les cartes de recettes.

/**
 * Classe représentant une recette.
 * @class Recipe
 */
class Recipe {
  /**
   * Constructeur de la classe Recipe.
   * @param {string} appliance - L'appareil de la recette.
   * @param {string} description - La description de la recette.
   * @param {number} id - L'ID de la recette.
   * @param {string} image - L'image de la recette.
   * @param {Array} ingredients - Les ingrédients de la recette.
   * @param {string} name - Le nom de la recette.
   * @param {number} servings - Le nombre de portions de la recette.
   * @param {number} time - Le temps de préparation de la recette.
   * @param {Array} ustensils - Les ustensiles de la recette.
   */
  constructor(appliance, description, id, image, ingredients, name, servings, time, ustensils) {
    this.appliance = appliance;
    this.description = description;
    this.id = id;
    this.image = image;
    this.ingredients = ingredients;
    this.name = name;
    this.servings = servings;
    this.time = time;
    this.ustensils = ustensils;
  }

  /**
   * Récupère le nom de la recette.
   * @returns {string} Le nom de la recette.
   */
  getName() {
    return this.name;
  }

  /**
   * Récupère les ingrédients de la recette.
   * @returns {Array} Les ingrédients de la recette.
   */
  getIngredients() {
    return this.ingredients;
  }

  /**
   * Récupère le temps de préparation de la recette.
   * @returns {number} Le temps de préparation de la recette.
   */
  getTime() {
    return this.time;
  }

  /**
   * Récupère le nombre de portions de la recette.
   * @returns {number} Le nombre de portions de la recette.
   */
  getServings() {
    return this.servings;
  }

  /**
   * Récupère les appareils de la recette.
   * @returns {string} L'appareil de la recette.
   */
  getAppliance() {
    return this.appliance;
  }

  /**
   * Récupère les ustensiles de la recette.
   * @returns {Array} Les ustensiles de la recette.
   */
  getUstensils() {
    return this.ustensils;
  }

  /**
   * Récupère l'ID de la recette.
   * @returns {number} L'ID de la recette.
   */
  getId() {
    return this.id;
  }

  /**
   * Génère la carte de la recette.
   * @returns {HTMLElement} La carte de la recette.
   */
  getCard() {
    // Création de la carte
    const recipeCard = document.createElement('article');
    recipeCard.classList.add('recipeCard');
    recipeCard.setAttribute('id', this.getId());

    // Création du header
    const recipeImgContainer = document.createElement('div');
    recipeImgContainer.classList.add('recipePictureContainer');
    recipeCard.appendChild(recipeImgContainer);

    // Création du body
    const recipeImg = document.createElement('img');
    recipeImg.setAttribute('src', `assets/Images/Recipes/${this.image}`);
    recipeImg.setAttribute('alt', this.name);
    recipeImg.classList.add('recipePicture');
    recipeImgContainer.appendChild(recipeImg);

    // Création encart 'Time'
    const Time = document.createElement('span');
    Time.classList.add('CookingTime');
    Time.textContent = `${this.time} min`;
    recipeImgContainer.appendChild(Time);

    // Création Contenu Texte
    const recipeContent = document.createElement('div');
    recipeContent.classList.add('recipeContent');
    recipeCard.appendChild(recipeContent);

    // Nom de la recette
    const recipeName = document.createElement('h2');
    recipeName.classList.add('recipeName');
    recipeName.textContent = this.name;
    recipeContent.appendChild(recipeName);

    // Titre de division Recette
    const recipeTitle = document.createElement('h3');
    recipeTitle.classList.add('cardTitle');
    recipeTitle.textContent = 'Recette';
    recipeContent.appendChild(recipeTitle);

    // Description de la recette
    const recipeDescription = document.createElement('div');
    recipeDescription.classList.add('recipeDescription');
    recipeDescription.textContent = this.description;
    recipeContent.appendChild(recipeDescription);

    // Titre de division Ingrédients
    const ingredientsTitle = document.createElement('h3');
    ingredientsTitle.classList.add('cardSubTitle');
    ingredientsTitle.textContent = 'Ingrédients';
    recipeContent.appendChild(ingredientsTitle);

    // Création de la liste des ingrédients
    const ingredientsList = document.createElement('div');
    ingredientsList.classList.add('recipeIngredients');

    // Boucle pour afficher les ingrédients
    for (let i = 0; i < this.ingredients.length; i += 1) {
      const ingredientItem = document.createElement('div');
      ingredientItem.classList.add('oneIngredientContainer');
      ingredientsList.appendChild(ingredientItem);

      const ingredientName = document.createElement('p');
      ingredientName.classList.add('ingredientName');
      ingredientName.textContent = this.ingredients[i].ingredient;
      ingredientItem.appendChild(ingredientName);

      recipeContent.appendChild(ingredientsList);

      const ingredientQuantity = this.ingredients[i].quantity ? this.ingredients[i].quantity : '';
      const ingredientUnit = this.ingredients[i].unit ? this.ingredients[i].unit : '';

      const ingredientMesure = `${ingredientQuantity} ${ingredientUnit}`;
      const ingredientMesureElement = document.createElement('p');
      ingredientMesureElement.classList.add('ingredientMesure');
      ingredientMesureElement.textContent = ingredientMesure;
      ingredientItem.appendChild(ingredientMesureElement);
    }

    return recipeCard;
  }
}

/**
 * Fonction qui affiche les recettes.
 * @param {Array} Array - Le tableau des recettes à afficher.
 */
function DisplayRecipes(Array) {
  recipeContainer.innerHTML = '';
  for (let i = 0; i < Array.length; i += 1) {
    // Parcourt le tableau recipesArray et crée une carte de recette pour chaque élément.
    const { appliance, description, id, image, ingredients, name, servings, time, ustensils } = Array[i];
    const recipe = new Recipe(appliance, description, id, image, ingredients, name, servings, time, ustensils);
    const recipeDom = recipe.getCard();
    recipeContainer.appendChild(recipeDom);
  }
}

/**
 * Fonction qui met à jour les recettes.
 * @param {Array} Array - Le tableau des recettes à mettre à jour.
 */
function UpdateRecipes(Array) {
  console.log('Array updater entries', Array);
  DisplayRecipes(Array);
  const NumberOfCards = document.querySelectorAll('.recipeCard');
  const resume = document.getElementById('summer'); // Affiche le nombre de recettes.
  const { length } = NumberOfCards; // Récupère la longueur du tableau recipesArray.
  resume.innerHTML = '';
  resume.innerHTML = `${length} `; // Affiche la longueur du tableau recipesArray.
}

export { Recipe, DisplayRecipes, UpdateRecipes };

/* eslint-disable no-new */
/* eslint-disable no-unused-vars */
/* eslint-disable no-console */
/* eslint-disable import/extensions */

import { Recipe, DisplayRecipes, UpdateRecipes } from '../controllers/RecipesController.js';
import { createAllFilters, createFilter } from '../utils/filters.js';
import { Search } from '../utils/search.js';
import { recipesArray, ingredientsObject, appliancesObject, ustensilesObject } from '../controllers/datasController.js';

const fullArray = [ingredientsObject, appliancesObject, ustensilesObject];
console.log('index.js chargé');

const mainInput = document.querySelector('#mainSearchInput');

/**
 * Fonction qui affiche le résumé du nombre de recettes.
 */
function summarize() {
  const NumberOfCards = document.querySelectorAll('.recipeCard');
  const resume = document.getElementById('summer'); // Affiche le nombre de recettes.
  const { length } = NumberOfCards; // Récupère la longueur du tableau recipesArray.
  resume.innerHTML = `${length} `; // Affiche la longueur du tableau recipesArray.
}

/**
 * Fonction d'initialisation de l'application.
 */
function init() {
  console.log('init chargé');

  // Initialise l'application
  recipesArray.forEach((Rec) => {
    // Parcourt le tableau recipesArray et crée une carte de recette pour chaque élément.
    const { appliance, description, id, image, ingredients, name, servings, time, ustensils } = Rec;
    const recipe = new Recipe(appliance, description, id, image, ingredients, name, servings, time, ustensils);
    DisplayRecipes(recipesArray);
  });

  createAllFilters(fullArray); // Crée les filtres de recherche.
  summarize(); // Affiche le nombre de recettes.

  mainInput.addEventListener('keyup', () => {
    if (mainInput.value.length > 2) {
      const [updatedArray, UpdatedElement] = Search(mainInput.value);
      console.log('mainInput.value', mainInput.value);
      console.log('mainInput.value', updatedArray);
      console.log('mainInput.value', UpdatedElement);

      UpdateRecipes(updatedArray);

      UpdatedElement.forEach((object) => {
        console.log('object', object);
        createFilter(object);
      });
    } else {
      UpdateRecipes(recipesArray);
      createAllFilters(fullArray);
    }
  });
}

init(); // Appel de la fonction d'initialisation

/* eslint-disable import/prefer-default-export */
/* eslint-disable no-unused-vars */

import { Label } from './labels.js';

/** Variables des éléments */
const filterIngredientsList = document.getElementById('ingredientsList');
const filterApplianceList = document.getElementById('appliancesList');
const filterUstensilsList = document.getElementById('ustensilsList');
const filtersBtn = document.querySelectorAll('.filterBtn');
const labelContainer = document.getElementById('labelsContainer');

/** Écouteur d'événement pour les boutons des filtres */
filtersBtn.forEach((btn) => {
  const input = btn.querySelector('input');
  const btnID = btn.id; // Récupère l'ID du bouton

  btn.addEventListener('click', (e) => {
    if (input.contains(e.target)) {
      e.stopImmediatePropagation();
    } else {
      e.stopPropagation();
      toggleList(btnID);
    }

    /** Écouteur d'événement de clic en dehors de la zone active */
    document.body.addEventListener('click', (e2) => {
      const activeFilter = document.querySelector('.filter.active');
      const activeBtnID = activeFilter?.id.replace('Filter', '');

      if (activeFilter) {
        if (
          e2.target.classList.contains('filter') &&
          !e2.target.classList.contains('active')
        ) {
          toggleList(e2.target.id);
          toggleList(activeBtnID);
        } else if (activeFilter) {
          toggleList(activeBtnID);
        }
      }
    });
  });
});

/** Fonction qui crée tous les filtres.
 * @param {Array} Array - Le tableau contenant les filtres à créer
 */
function createAllFilters(Array) {
  console.log('createAllFilters chargé');
  console.log('Array entries createallfilters', Array);
  // Parcourt chaque élément de fullArray et appelle createFilter pour chaque élément.
  Array.forEach((obj) => {
    const arrayName = Object.keys(obj)[0];
    const arrayElement = Object.values(obj)[0].sort((a, b) => a.localeCompare(b));

    if (arrayName === 'ingredients') {
      const OldElements = document.querySelectorAll('#ingredientsList .filterOption');
      OldElements.forEach((Oldelement) => {
        Oldelement.remove();
      });

      // createFilter({ 'ingredients': ${arrayElement} });
    } else if (arrayName === 'appliances') {
      const OldElements = document.querySelectorAll('#appliancesList .filterOption');
      OldElements.forEach((Oldelement) => {
        Oldelement.remove();
      });
      createFilter({ appliances: arrayElement });
    } else if (arrayName === 'ustensils') {
      const OldElements = document.querySelectorAll('#ustensilsList .filterOption');
      OldElements.forEach((Oldelement) => {
        Oldelement.remove();
      });
      createFilter({ ustensils: arrayElement });
    }
  });
}

/** Fonction qui crée un filtre pour un objet donné.
 * @param {Object} Obj - L'objet pour lequel on veut créer un filtre
 */
function createFilter(Obj) {
  const arrayName = Object.keys(Obj)[0];
  const arrayFull = Object.values(Obj)[0].sort((a, b) => a.localeCompare(b));

  arrayFull.forEach((element) => {
    // Parcourt chaque élément du tableau et crée un élément HTML pour chaque élément.
    const filterElement = document.createElement('div');
    const filterarrayName = element.toUpperCase().charAt(0) + element.slice(1);
    filterElement.id = `Filter-${filterarrayName.replaceAll(' ', '')}`;
    filterElement.innerHTML = `${filterarrayName}`;
    filterElement.classList.add('filterOption');

    // Écouteur d'événement Click pour chaque élément de filtre.
    filterElement.addEventListener('click', (e) => {
      e.stopPropagation();
      const activeFilter = filterElement.classList.contains('active'); // Récupère l'élément de filtre en état actif
      const activeBtn = document.querySelector('.filter.active');

      if (!activeFilter) {
        filterElement.classList.toggle('active');
        const label = new Label(filterarrayName);
        const labelDom = label.getDom();
        label.addListener();
        labelDom.classList.add(`label-${arrayName}`);
        filterElement.innerHTML = `<p class='filterarrayName'>${filterarrayName}</p> <i class="fa-solid fa-circle-xmark filter-icon"></i>`;

        labelContainer.appendChild(labelDom);
      } else if (e.target.classList.contains('filter-icon')) {
        e.stopPropagation();
        filterElement.classList.remove('active');
        filterElement.innerHTML = `${filterarrayName}  `;
        const labelDom = document.getElementById(`label-${filterarrayName}`);
        labelDom.remove();
      } else {
        toggleList(activeBtn.id);
        filterElement.innerHTML = `${filterarrayName}  `;
        const labelDom = document.getElementById(`label-${filterarrayName}`);
        labelDom.remove();
      }
    });

    // Écouteur d'événement Hover pour chaque élément de filtre.
    filterElement.addEventListener('mouseover', () => {
      filterElement.classList.add('hovered');
    });

    // Écouteur d'événement HoverOut pour chaque élément de filtre.
    filterElement.addEventListener('mouseout', () => {
      filterElement.classList.remove('hovered');
    });

    // Ajoute l'élément de filtre à la bonne liste.
    if (arrayName === 'ingredients') {
      filterIngredientsList.appendChild(filterElement);
    } else if (arrayName === 'appliances') {
      filterApplianceList.appendChild(filterElement);
    } else if (arrayName === 'ustensils') {
      filterUstensilsList.appendChild(filterElement);
    }
  });
}

/** Fonction qui affiche ou cache la liste de filtre.
 * @param { string } FilterID - Le nom du bouton de filtre
 */
function toggleList(FilterID) {
  const list = document.getElementById(`${FilterID}List`);
  const btn = document.getElementById(`${FilterID}`);
  const zone = document.getElementById(`${FilterID}Filter`);

  list.classList.toggle('active');
  list.classList.toggle('hidden');
  btn.classList.toggle('active');
  zone.classList.toggle('active');
  btn.querySelector('i').classList.toggle('fa-chevron-down');
  btn.querySelector('i').classList.toggle('fa-chevron-up');
}

export { createAllFilters, createFilter };

/* eslint-disable import/prefer-default-export */

/** Class representing a label.
 * @class Label
 */
class Label {
    constructor(id) {
        this.id = id;
        this.html = `<div class="labels" id="label-${this.id}">
                        <span>${this.id}</span>
                        <i class="hidden fa-solid fa-xmark label-icon"></i>
                    </div>`;

        this.labelElement = document.createElement('div');
        this.labelElement.innerHTML = `${this.html}`;
        this.labelIcon = this.labelElement.querySelector('.label-icon');
        this.addListener();
    }

    /** Get the label's ID.
     *
     * @returns {HTMLElement} Returns an HTML element "label" and adds a "click" event on the icon to remove the label.
     */
    getDom() {
        return this.labelElement;
    }

    addListener() {
        this.labelIcon.addEventListener('click', (e) => {
            e.stopPropagation();
            const filter = document.querySelector(`#Filter-${this.id}`);
            if (filter) {
                filter.classList.remove('active');
                filter.innerHTML = `${this.id}`;
                this.labelElement.remove();
            } else {
                this.labelElement.remove();
            }
        });
    }
}

export { Label };

/* eslint-disable import/prefer-default-export */
/* eslint-disable no-unused-vars */

import { appliancesObject, ingredientsObject, recipesArray, ustensilesObject } from '../controllers/datasController.js';
import { createAllFilters, createFilter } from './filters.js';

import { Label } from './labels.js';

console.log('search.js chargé');

const NewappliancesArray = [];
const NewIngredientsArray = [];
const NewUstensilesArray = [];

/**
 * Recherche les recettes correspondant à un mot-clé donné.
 * @param {string} keyword - Le mot-clé à rechercher
 * @returns {Array} - Un tableau contenant les recettes mises à jour et les filtres mis à jour
 */
function Search(keyword) {
  const updatedArray = []

  recipesArray.forEach(recipe => {

    const {  description, ingredients, name } = recipe;
    const ElementsToCheck = [name, description ]
    for (let i = 0; i <= ingredients.lenght ; i += 1) {
      const { ingredient } = ingredients[i]
      ElementsToCheck.push(ingredient)
    }

    ElementsToCheck.forEach(element => {
      if (element.includes(keyword) && !updatedArray.includes(recipe)) {
        updatedArray.push(recipe)
      }
    })})

      updatedArray.forEach(recipe => {
        const { appliance, ingredients, ustensils } = recipe;
        if (!NewappliancesArray.includes(appliance)){
          NewappliancesArray.push(appliance)
        }
        ingredients.forEach(element => {
          if (!NewIngredientsArray.includes(element.ingredient)){
          NewIngredientsArray.push(element.ingredient)
        }})
        ustensils.forEach(element => {
          if (!NewUstensilesArray.includes(element)){
          NewUstensilesArray.push(element)
        }
      })
      })

  const UpdatedFilterApplicances = { 'appliances': NewappliancesArray };
  const UpdatedFilterIngredients = { 'ingredients': NewIngredientsArray };
  const UpdatedFilterUstensiles = { 'ustensils': NewUstensilesArray };
  const UpdatedElement = [UpdatedFilterIngredients, UpdatedFilterApplicances, UpdatedFilterUstensiles];

  return [updatedArray, UpdatedElement];
}

export { Search };
